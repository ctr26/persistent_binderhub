binderhub:
  # Helm config for BinderHub goes here
  # see https://github.com/jupyterhub/binderhub/blob/master/helm-chart/binderhub/values.yaml
  pdb:
    minAvailable: 0
  # NOTE: binder pod must have 1 replica,
  # otherwise there are authentication errors
  # (https://github.com/jupyterhub/jupyterhub/issues/2841)
  replicas: 1

  config:
    BinderHub:
      auth_enabled: true
      # NOTE: when base_url is changed,
      # change also binder_base_url and static_binder in jupyterhub.hub.extraConfig.20-template-variables
      base_url: /services/binder/
      use_registry: true
      build_image: jupyter/repo2docker:2021.03.0-53.geb75209

  extraEnv:
    - name: PROJECTS_LIMIT_PER_USER
      value: "5"

  extraConfig:
    20-launcher:  |
      import json
      import os
      from tornado import web

      async def check_user_projects(launcher, image, username, server_name, repo_url):
          """Checks if current user exceeds the limit of projects stored per user or not.
          If yes, show an error message to user.
          """
          projects_limit = int(os.getenv('PROJECTS_LIMIT_PER_USER', 0))
          if projects_limit > 0:
            # we are making request to API with admin token
            resp = await launcher.api_request(
                'projects/%s' % username,
                method='GET',
            )
            body = json.loads(resp.body.decode('utf-8'))
            projects = body['projects']
            if projects:
              projects_repo_list = [p['repo_url'] for p in projects]
              if repo_url not in projects_repo_list and len(projects) >= projects_limit:
                  raise web.HTTPError(409, "No more than {} projects is allowed. "
                                           "One must be deleted before a new project can be created.".
                                           format(projects_limit))
      c.Launcher.pre_launch_hook = check_user_projects

  cors: &cors
    allowOrigin: '*'

  jupyterhub:
    # Helm config for JupyterHub goes here
    # see https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
    custom:
      cors: *cors
      binderauth_enabled: true
      mount_all_projects: true
      default_project:
        repo_url: "https://github.com/gesiscss/persistent_binderhub"
        ref: "0.2.0-n645"
    cull:
      # don't cull authenticated users
      users: False
    hub:
      # NOTE: hub and proxy must have 1 pod
      # (https://github.com/jupyterhub/jupyterhub/issues/2841#issuecomment-561848594)
      # replicas: 1
      pdb:
        minAvailable: 0

      templatePaths:
        - "/etc/jupyterhub/templates"
      extraFiles:
        persistent_bhub_config:
          mountPath: /usr/local/etc/jupyterhub/persistent_bhub_config.py
          binaryData: IiIiCkN1c3RvbSBLdWJlU3Bhd25lciBhbmQgYW4gQVBJIGhhbmRsZXIgZm9yIHByb2plY3RzIHRvIGJlIHVzZWQgaW4gcGVyc2lzdGVudCBCaW5kZXJIdWIgZGVwbG95bWVudC4KVGhlc2UgYXJlIGltcG9ydGVkIGluIGJpbmRlcmh1Yi5qdXB5dGVyaHViLmh1Yi5leHRyYUNvbmZpZyBpbiB2YWx1ZXMueWFtbC4KIiIiCmltcG9ydCByZQppbXBvcnQganNvbgppbXBvcnQgc3RyaW5nCmltcG9ydCByYW5kb20KaW1wb3J0IHoyamgKZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZQpmcm9tIHRvcm5hZG8gaW1wb3J0IHdlYgpmcm9tIGp1cHl0ZXJodWIudXRpbHMgaW1wb3J0IGFkbWluX29ubHkKZnJvbSBqdXB5dGVyaHViLmFwaWhhbmRsZXJzLnVzZXJzIGltcG9ydCBhZG1pbl9vcl9zZWxmCmZyb20ganVweXRlcmh1Yi5hcGloYW5kbGVycy5iYXNlIGltcG9ydCBBUElIYW5kbGVyCmZyb20ga3ViZXNwYXduZXIgaW1wb3J0IEt1YmVTcGF3bmVyCmZyb20gdHJhaXRsZXRzIGltcG9ydCBMaXN0CgpERUZBVUxUX1BST1ZJREVSUyA9ICgKICAgIHsicHJlZml4IjogImdoIiwgIm5hbWUiOiAiR2l0SHViIiwgImhvc3RuYW1lIjogImdpdGh1Yi5jb20ifSwKICAgIHsicHJlZml4IjogImdpdCIsICJuYW1lIjogIkdpdCIsICJob3N0bmFtZSI6IE5vbmV9LAogICAgeyJwcmVmaXgiOiAiZ2wiLCAibmFtZSI6ICJHaXRMYWIiLCAiaG9zdG5hbWUiOiAiZ2l0bGFiLmNvbSJ9LAogICAgeyJwcmVmaXgiOiAiZ2lzdCIsICJuYW1lIjogIkdpc3QiLCAiaG9zdG5hbWUiOiAiZ2lzdC5naXRodWIuY29tIn0sCiAgICAjIGhvc3RuYW1lIGlzIHRoZSBzdHJpbmcgInplbm9kbyIgYXMgaW4gdGhlIGZvcm1hdCAxMC41MjgxL3plbm9kby40Mjc0NTA1CiAgICAjIFRPRE86IGFyYml0cmFyeSBET0lzPwogICAgeyJwcmVmaXgiOiAiemVub2RvIiwgIm5hbWUiOiAiWmVub2RvIERPSSIsICJob3N0bmFtZSI6ICJ6ZW5vZG8ifSwKICAgICMgaG9zdG5hbWUgaXMgdGhlIHN0cmluZyAiZmlnc2hhcmUiIGFzIGluIHRoZSBmb3JtYXQgMTAuNjA4NC9tOS5maWdzaGFyZS45NzgyNzc3LnYxCiAgICAjIFRPRE86IHNlbGYgaG9zdGVkIERPSXM/CiAgICB7InByZWZpeCI6ICJmaWdzaGFyZSIsICJuYW1lIjogIkZpZ3NoYXJlIERPSSIsICJob3N0bmFtZSI6ICJmaWdzaGFyZSJ9LAogICAgeyJwcmVmaXgiOiAiaHlkcm9zaGFyZSIsICJuYW1lIjogIkh5ZHJvc2hhcmUgcmVzb3VyY2UiLCAiaG9zdG5hbWUiOiAiaHlkcm9zaGFyZS5vcmcifSwKICAgICMgaG9zdG5hbWUgaXMgdGhlIHN0cmluZyAiZHZuIiAobG93ZXJjYXNlZCkgYXMgaW4gdGhlIGZvcm1hdCAxMC43OTEwL0RWTi9USkNMS1AKICAgICMgVE9ETzogc2VsZiBob3N0ZWQgRE9Jcz8KICAgIHsicHJlZml4IjogImRhdGF2ZXJzZSIsICJuYW1lIjogIkRhdGF2ZXJzZSBET0kiLCAiaG9zdG5hbWUiOiAiZHZuIn0sCikKCkRFRkFVTFRfUFJPVklERVIgPSB7InByb3ZpZGVyX3ByZWZpeCI6ICJnaXQiLCAicHJvdmlkZXJfbmFtZSI6ICJHaXQifQoKCmNsYXNzIFBlcnNpc3RlbnRCaW5kZXJTcGF3bmVyKEt1YmVTcGF3bmVyKToKICAgICIiIkFzc3VtaW5nIHRoYXQgZWFjaCB1c2VyIGhhcyBhIHN0b3JhZ2UgKFBlcnNpc3RlbnQgVm9sdW1lKQogICAgLSBjb3BpZXMgbGF1bmNoZWQgcHJvamVjdCdzIGRhdGEgKHJlcG8gY29udGVudCkgaW50byBhIHNlcGFyYXRlIGRpcmVjdG9yeSBieSB1c2luZyBgaW5pdENvbnRhaW5lcnNgLgogICAgICBTbyBpbiB0aGUgcHJvamVjdCBkaXIgd2UgaGF2ZSB0aGUgc2FtZSBjb250ZW50IGFzIHByb3ZpZGVkIGJ5IHJlcG8yZG9ja2VyLgogICAgICBUaGlzIGlzIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgYmVjYXVzZSBwcm9qZWN0cyBtYXkgdXNlIGZ1cnRoZXIgZmVhdHVyZXMgb2YgcmVwbzJkb2NrZXIgc3VjaCBhcyB0aGUgcG9zdEJ1aWxkIHNjcmlwdC4KICAgIC0gZGVsZXRlcyBkaXJzIG9mIHByb2plY3RzLCB3aGljaCBhcmUgaW4gc3RhdGVbImRlbGV0ZWRfcHJvamVjdHMiXSBvZiBgc3Bhd25lcnNgIHRhYmxlCiAgICAtIG1vdW50cyB1c2Vy4oCZcyBQViBzb21ld2hlcmUgb3RoZXIgdGhhbiB0aGUgaG9tZSBkaXIgKHRvIC9wcm9qZWN0cyksIHNvIHRoYXQgdXNlcnMgY2FuIGFjY2VzcyBmaWxlcyBhY3Jvc3MgbXVsdGlwbGUgcHJvamVjdHMKICAgIC0gbW91bnRzIHRoZSBkaXIgb2YgdGhlIGxhdW5jaGVkIHByb2plY3QgKGZyb20gdXNlcuKAmXMgUFYpIGludG8gdGhlIGhvbWUgZGlyICgvaG9tZS9qb3Z5YW4pCiAgICAtIHN0YXJ0cyBhIG5vdGVib29rIHNlcnZlciBvbiBgL2hvbWUvam92eWFuYCB3aGljaCBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBCaW5kZXJIdWIuCiAgICAgIFRha2VzIHByb2plY3QgaW5mb3JtYXRpb24gKGUuZy4gaW1hZ2UgYW5kIHJlcG8gdXJsKSBmcm9tIGB1c2VyX29wdGlvbnNgLCB3aGljaCBpcyBzZXQgYnkgYmluZGVyLgogICAgLSBhZGRzL3VwZGF0ZXMgZGF0YSBvZiB0aGUgbGF1bmNoZWQgcHJvamVjdCBpbnRvIHN0YXRlWyJwcm9qZWN0cyJdIG9mIGBzcGF3bmVyc2AgdGFibGUKICAgICIiIgogICAgcmVwb19wcm92aWRlcnMgPSBMaXN0KAogICAgICAgIERFRkFVTFRfUFJPVklERVJTLAogICAgICAgIGNvbmZpZz1UcnVlLAogICAgICAgIGhlbHA9IiIiCiAgICAgICAgTGlzdCBvZiBSZXBvIFByb3ZpZGVycyB0byB1c2UgaW4gdGhlIFVJCiAgICAgICAgIiIiLAogICAgKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIF9yZXBvX3Byb3ZpZGVyX2J5X2RvbWFpbihzZWxmKToKICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAoCiAgICAgICAgICAgICAgICByZXBvX3Byb3ZpZGVyWyJob3N0bmFtZSJdLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJwcm92aWRlcl9wcmVmaXgiOiByZXBvX3Byb3ZpZGVyWyJwcmVmaXgiXSwKICAgICAgICAgICAgICAgICAgICAicHJvdmlkZXJfbmFtZSI6IHJlcG9fcHJvdmlkZXJbIm5hbWUiXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICkKICAgICAgICAgICAgZm9yIHJlcG9fcHJvdmlkZXIgaW4gc2VsZi5yZXBvX3Byb3ZpZGVycwogICAgICAgICAgICBpZiByZXBvX3Byb3ZpZGVyWyJob3N0bmFtZSJdIGlzIG5vdCBOb25lCiAgICAgICAgXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoUGVyc2lzdGVudEJpbmRlclNwYXduZXIsIHNlbGYpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgICMgZ2V0IGRlZmF1bHRfcHJvamVjdCBmcm9tIGN1c3RvbSBjb25maWcgb2YgejJqaCBjaGFydCAoYGJpbmRlcmh1Yi5qdXB5dGVyaHViLmN1c3RvbWApCiAgICAgICAgIyBodHRwczovL3plcm8tdG8tanVweXRlcmh1Yi5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvYWRtaW5pc3RyYXRvci9hZHZhbmNlZC5odG1sI2N1c3RvbS1jb25maWd1cmF0aW9uCiAgICAgICAgZGVmYXVsdF9wcm9qZWN0ID0gejJqaC5nZXRfY29uZmlnKCdjdXN0b20uZGVmYXVsdF9wcm9qZWN0JykKICAgICAgICBkaXNwbGF5X25hbWUgPSBzZWxmLnVybF90b19kaXNwbGF5X25hbWUoZGVmYXVsdF9wcm9qZWN0WyJyZXBvX3VybCJdKQogICAgICAgICMgZGVmYXVsdF9wcm9qZWN0IGlzIG9ubHkgdG8gdXNlIHdoZW4gZmlyc3QgbG9naW4KICAgICAgICBzZWxmLmRlZmF1bHRfcHJvamVjdCA9IHsKICAgICAgICAgICAgInJlcG9fdXJsIjogZGVmYXVsdF9wcm9qZWN0WyJyZXBvX3VybCJdLAogICAgICAgICAgICAiaW1hZ2UiOiAiIiwKICAgICAgICAgICAgInJlZiI6IGRlZmF1bHRfcHJvamVjdFsicmVmIl0sCiAgICAgICAgICAgICJkaXNwbGF5X25hbWUiOiBkaXNwbGF5X25hbWUsCiAgICAgICAgICAgICJsYXN0X3VzZWQiOiAibmV2ZXIiLAogICAgICAgIH0KCiAgICBkZWYgdXJsX3RvX3Byb3ZpZGVyX2FyZ3Moc2VsZiwgdXJsOiBzdHIpIC0+IGRpY3Q6CiAgICAgICAgIiIiSW5mZXJzIHRoZSByZXBvIHByb3ZpZGVyIGZyb20gYSBVUkwuIiIiCiAgICAgICAgaWYgdXJsLmVuZHN3aXRoKCIuZ2l0Iik6CiAgICAgICAgICAgIHVybCA9IHVybFs6LTRdCiAgICAgICAgdXJsX3BhcnRzID0gdXJscGFyc2UodXJsKQogICAgICAgIHByb3ZpZGVyID0gdXJsX3BhcnRzLm5ldGxvYy5sb3dlcigpCiAgICAgICAgIyBGb3IgWmVub2RvLCBmaWdzaGFyZSwgZGF0YXZlcnNlIG9ubHkgRE9JIGlzIHN1cHBvcnRlZCBzbyBuZXRsb2Mgd2lsbCBiZSBhbiBlbXB0eSBzdHJpbmcuCiAgICAgICAgIyBpZiBvbmx5IGEgTUQ1IGhhc2ggaXMgcHJvdmlkZWQsIG5ldGxvYyB3aWxsIGJlIGFuIGVtcHR5IHN0cmluZyBhbmQgaXQncyBoeWRyb3NoYXJlIHJlc291cmNlIElELgogICAgICAgIGlmIGxlbihwcm92aWRlcikgPT0gMDoKICAgICAgICAgICAgcHJvdmlkZXIgPSB1cmxfcGFydHMucGF0aC5sb3dlcigpCiAgICAgICAgICAgICMgY2hlY2sgaWYgb25seSBoeWRyb3NoYXJlIHJlc291cmNlIElEIGlzIHByZXNlbnQKICAgICAgICAgICAgIyBJdCdzIGEgTUQ1IGhhc2gKICAgICAgICAgICAgaWYgbGVuKHJlLmZpbmRhbGwociIoW2EtZkEtRlxkXXszMn0pIiwgcHJvdmlkZXIpKSA9PSAxOgogICAgICAgICAgICAgICAgcHJvdmlkZXIgPSAnaHlkcm9zaGFyZScKCiAgICAgICAgZm9yIGRvbWFpbiwgYXJncyBpbiBzZWxmLl9yZXBvX3Byb3ZpZGVyX2J5X2RvbWFpbjoKICAgICAgICAgICAgaWYgZG9tYWluIGluIHByb3ZpZGVyOgogICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MKICAgICAgICByZXR1cm4gREVGQVVMVF9QUk9WSURFUgoKICAgIGRlZiB1cmxfdG9fZGlzcGxheV9uYW1lKHNlbGYsIHVybCk6CiAgICAgICAgIiIiQ29udmVydHMgYSBVUkwgdG8gZGlzcGxheSBuYW1lIGluIGEgYHByZWZpeC91c2VyX29yX29yZ19uYW1lL3JlcG9fbmFtZWAgZm9ybWF0LiIiIgogICAgICAgIGlmIHVybC5lbmRzd2l0aCgnLmdpdCcpOgogICAgICAgICAgICB1cmwgPSB1cmxbOi00XQogICAgICAgIHVybF9wYXJ0cyA9IHVybHBhcnNlKHVybCkKICAgICAgICBwcm92aWRlcl9wcmVmaXggPSBzZWxmLnVybF90b19wcm92aWRlcl9hcmdzKHVybClbInByb3ZpZGVyX3ByZWZpeCJdCiAgICAgICAgcGF0aCA9IHVybF9wYXJ0cy5wYXRoLnN0cmlwKCcvJykKICAgICAgICBkaXNwbGF5X25hbWUgPSBmJ3twcm92aWRlcl9wcmVmaXh9L3twYXRofScKICAgICAgICByZXR1cm4gZGlzcGxheV9uYW1lCgogICAgZGVmIHVybF90b19kaXIoc2VsZiwgdXJsKToKICAgICAgICAiIiJDb252ZXJ0cyBhIFVSTCB0byBkaXJlY3RvcnkgbmFtZS4iIiIKICAgICAgICBkaXNwbGF5X25hbWUgPSBzZWxmLnVybF90b19kaXNwbGF5X25hbWUodXJsKQogICAgICAgIGRpcl9uYW1lID0gJycuam9pbihbYyBpZiBjLmlzYWxudW0oKSBvciBjIGluIFsnLScsICcuJ10gZWxzZSAnXycgZm9yIGMgaW4gZGlzcGxheV9uYW1lXSkKICAgICAgICBpZiBsZW4oZGlyX25hbWUpID4gMjU1OgogICAgICAgICAgICBzdWZmaXhfY2hhcnMgPSBzdHJpbmcuYXNjaWlfbG93ZXJjYXNlICsgc3RyaW5nLmRpZ2l0cwogICAgICAgICAgICBzdWZmaXggPSByYW5kb20uY2hvaWNlcyhzdWZmaXhfY2hhcnMsIGs9OCkKICAgICAgICAgICAgZGlyX25hbWUgPSBmJ3tkaXJfbmFtZVs6MTIyXX1fe2Rpcl9uYW1lWy0xMjI6XX1fe3N1ZmZpeH0nCiAgICAgICAgcmV0dXJuIGRpcl9uYW1lCgogICAgZGVmIHN0YXJ0KHNlbGYpOgogICAgICAgICIiIlN0YXJ0cyB0aGUgdXNlcidzIHBvZCB3aXRoIGB1c2VyX29wdGlvbnNgLCB3aGljaCBpcyBzZXQgYnkgYmluZGVyLgogICAgICAgIEJlZm9yZSBzdGFydGluZyB0aGUgbm90ZWJvb2sgc2VydmVyLCBzdGFydHMgYW4gYGluaXRDb250YWluZXJgIHdoaWNoCiAgICAgICAgZmlyc3QgZ2V0cyB0aGUgaW5mb3JtYXRpb24gb2YgcHJvamVjdHMgdG8gZGVsZXRlIGZyb20gc3RhdGVbImRlbGV0ZWRfcHJvamVjdHMiXSAoYHNwYXduZXJzYCB0YWJsZSksCiAgICAgICAgdGhlbiBkZWxldGVzIHRoZXNlIHByb2plY3RzIG9uIGRpc2sgKHVzZXIgc3RvcmFnZSksCiAgICAgICAgYW5kIHRoZW4gY29waWVzIGNvbnRlbnQgb2YgaW1hZ2UncyBob21lIGRpciBpbnRvIHByb2plY3QgZGlyIGlmIHByb2plY3QgZGlyIGRvZXNuJ3QgZXhpc3QuCgogICAgICAgIFN0YXJ0cyB0aGUgbm90ZWJvb2sgc2VydmVyIHdpdGggMiBtb3VudHMsCiAgICAgICAgZmlyc3Qgb25lIGlzIHRoZSB1c2VyIHN0b3JhZ2UgKHdoZXJlIGFsbCBwcm9qZWN0cyB0YWtlIHBsYWNlKSwgd2hpY2ggaXMgbW91bnRlZCB0byBgL3Byb2plY3RzYCBhbmQKICAgICAgICBzZWNvbmQgb25lIGlzIGN1cnJlbnRseSBsYXVuY2hlZCBwcm9qZWN0J3MgZGlyIG9uIHRoZSB1c2VyIHN0b3JhZ2UsIHdoaWNoIGlzIG1vdW50ZWQgdG8gYC9ob21lL2pvdnlhbmAuCgogICAgICAgIE5vdGU6IGluaXQgYW5kIG5vdGVib29rcyBjb250YWluZXJzIHNoYXJlcyBhIHZvbHVtZSAodXNlciBzdG9yYWdlKSwgdGhhdCdzIGhvdyBwcm9qZWN0IGNvbnRlbnQsIHdoaWNoIGlzCiAgICAgICAgY29waWVkIGJ5IGluaXQgY29udGFpbmVyLCBpcyBhbHNvIGF2YWlsYWJsZSB0byBub3RlYm9vayBjb250YWluZXIuCiAgICAgICAgIiIiCiAgICAgICAgIyBjbGVhbiBhdHRyaWJ1dGVzLCBzbyB3ZSBkb250IHNhdmUgd3JvbmcgdmFsdWVzIGluIHN0YXRlIHdoZW4gZXJyb3IgaGFwcGVucwogICAgICAgIGZvciBhdHRyIGluICgncmVwb191cmwnLCAncmVmJywgJ2ltYWdlJyk6CiAgICAgICAgICAgIHNlbGYuX19kaWN0X18ucG9wKGF0dHIsIE5vbmUpCgogICAgICAgICMgZ2V0IGltYWdlIHNwZWMgZnJvbSB1c2VyX29wdGlvbnMKICAgICAgICBpZiAnaW1hZ2UnIGluIHNlbGYudXNlcl9vcHRpb25zIGFuZCBcCiAgICAgICAgICAgJ3JlcG9fdXJsJyBpbiBzZWxmLnVzZXJfb3B0aW9ucyBhbmQgXAogICAgICAgICAgICd0b2tlbicgaW4gc2VsZi51c2VyX29wdGlvbnM6CiAgICAgICAgICAgICMgYmluZGVyIHNlcnZpY2Ugc2V0cyB0aGUgaW1hZ2Ugc3BlYyB2aWEgdXNlciBvcHRpb25zCiAgICAgICAgICAgICMgdXNlcl9vcHRpb25zIGlzIHNhdmVkIGluIGRhdGFiYXNlLCBzbyBldmVuIHVzZXIgZGVsZXRlcyBhbGwgcHJvamVjdHMsCiAgICAgICAgICAgICMgdXNlcl9vcHRpb25zIGZvciBsYXN0IGxhdW5jaGVkIHJlcG8gc3RheXMgaW4gZGF0YWJhc2UKICAgICAgICAgICAgIyBOT1RFOiB1c2VyIGNhbiBwYXNzIGFueSBvcHRpb25zIHRocm91Z2ggQVBJICh3aXRob3V0IHVzaW5nIGJpbmRlcikgdG9vCiAgICAgICAgICAgIHNlbGYuaW1hZ2UgPSBzZWxmLnVzZXJfb3B0aW9uc1snaW1hZ2UnXQogICAgICAgICAgICBzZWxmLnJlZiA9IHNlbGYuaW1hZ2Uuc3BsaXQoJzonKVstMV0KICAgICAgICAgICAgIyByZXBvX3VybCBpcyBnZW5lcmF0ZWQgaW4gYmluZGVyaHViIGJ5IHJlcG8gcHJvdmlkZXJzCiAgICAgICAgICAgIHNlbGYucmVwb191cmwgPSBzZWxmLnVzZXJfb3B0aW9uc1sncmVwb191cmwnXQogICAgICAgICAgICAjIHN0cmlwIC5naXQgYXQgdGhlIGVuZAogICAgICAgICAgICBpZiBzZWxmLnJlcG9fdXJsLmVuZHN3aXRoKCcuZ2l0Jyk6CiAgICAgICAgICAgICAgICBzZWxmLnJlcG9fdXJsID0gc2VsZi5yZXBvX3VybFs6LTRdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBpZiB1c2VyIG5ldmVyIGxhdW5jaGVkIGEgcmVwbyBiZWZvcmUgKHVzZXJfb3B0aW9ucyBpbiBkYXRhYmFzZSBpcyBlbXB0eSkKICAgICAgICAgICAgIyBhbmQgdXNlciBpcyB0cnlpbmcgdG8gc3RhcnQgdGhlIHNlcnZlciB2aWEgc3Bhd24gdXJsCiAgICAgICAgICAgICMgbm9ybWFsbHkgdGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFuZAogICAgICAgICAgICAjIGl0IHdvdWxkIGJlIGdvb2QgYnV0IHdlIGNhbid0IGRpc3BsYXkgYSBtZXNzYWdlIHRvIHVzZXIsIGFuZCByYWlzaW5nIGVycm9ycyBjYXVzZSBodWIgdG8gcmVzdGFydAogICAgICAgICAgICAjIHNvIChhcyBhIHdvcmthcm91bmQpIGxhdW5jaCBhIHJlcG8gdW50aWwgd2UgaGFuZGxlIHRoaXMgYmV0dGVyIEZJWE1FCiAgICAgICAgICAgIHByb2plY3RzID0gc2VsZi5nZXRfc3RhdGVfZmllbGQoJ3Byb2plY3RzJykKICAgICAgICAgICAgaWYgcHJvamVjdHMgYW5kIHByb2plY3RzWy0xXS5nZXQoImltYWdlIik6CiAgICAgICAgICAgICAgICAjIGZpcnN0IGJlIHN1cmUgdGhhdCB1c2VyIGhhcyBubyB2YWxpZCBwcm9qZWN0cwogICAgICAgICAgICAgICAgc2VsZi5yZXBvX3VybCA9IHByb2plY3RzWy0xXVsicmVwb191cmwiXQogICAgICAgICAgICAgICAgc2VsZi5pbWFnZSA9IHByb2plY3RzWy0xXVsiaW1hZ2UiXQogICAgICAgICAgICAgICAgc2VsZi5yZWYgPSBwcm9qZWN0c1stMV1bInJlZiJdCiAgICAgICAgICAgICAgICBzZWxmLmxvZy53YXJuaW5nKGYiUHJvamVjdCAne3NlbGYucmVwb191cmx9JyB3aXRoICd7c2VsZi5pbWFnZX0nIGRvZXNuJ3QgZXhpc3QgaW4gdXNlcl9vcHRpb25zLiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBtc2cgPSBmIlVzZXIgKHtzZWxmLnVzZXIubmFtZX0pIGlzIHRyeWluZyB0byBzdGFydCB0aGUgc2VydmVyIHZpYSBzcGF3biB1cmwuIgogICAgICAgICAgICAgICAgIyBzZWxmLmhhbmRsZXIucmVkaXJlY3QoIi9odWIvaG9tZSIpCiAgICAgICAgICAgICAgICAjIHJhaXNlIEV4Y2VwdGlvbihtc2cpCiAgICAgICAgICAgICAgICBzZWxmLmxvZy5pbmZvKG1zZykKICAgICAgICAgICAgICAgIHNlbGYucmVwb191cmwgPSAiaHR0cHM6Ly9naXRodWIuY29tL2dlc2lzY3NzL3BlcnNpc3RlbnRfYmluZGVyaHViIgogICAgICAgICAgICAgICAgc2VsZi5pbWFnZSA9ICJnZXNpc2Nzcy9iaW5kZXItZ2VzaXNjc3MtMmRwZXJzaXN0ZW50LTVmYmluZGVyaHViLWFiMTA3ZjowLjIuMC1uNjQ1IgogICAgICAgICAgICAgICAgc2VsZi5yZWYgPSBzZWxmLmltYWdlLnNwbGl0KCc6JylbLTFdCiAgICAgICAgc2VsZi5sb2cuaW5mbyhmIlVzZXIgKHtzZWxmLnVzZXIubmFtZX0pIGlzIGxhdW5jaGluZyAne3NlbGYucmVwb191cmx9JyBwcm9qZWN0IHdpdGggJ3tzZWxmLmltYWdlfScuIikKCiAgICAgICAgIyBwcmVwYXJlIHRoZSBpbml0Q29udGFpbmVyCiAgICAgICAgIyBOT1RFOiBmaXJzdCBpbml0Q29udGFpbmVyIHJ1bnMgYW5kIHdoZW4gaXQgaXMgZG9uZSwgdGhlbiBub3RlYm9vayBjb250YWluZXIgcnVucwogICAgICAgICMgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMvaW5pdC1jb250YWluZXJzLwogICAgICAgICMgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvY29uZmlndXJlLXBvZC1jb250YWluZXIvY29uZmlndXJlLXBvZC1pbml0aWFsaXphdGlvbi8jY3JlYXRlLWEtcG9kLXRoYXQtaGFzLWFuLWluaXQtY29udGFpbmVyCiAgICAgICAgIyBodHRwczovL2dpdGh1Yi5jb20vanVweXRlcmh1Yi9rdWJlc3Bhd25lci9ibG9iL3YwLjguMS9rdWJlc3Bhd25lci9zcGF3bmVyLnB5I0w2MzgtTDY2NAogICAgICAgIG1vdW50X3BhdGggPSAnL3Byb2plY3RzLycKICAgICAgICAjIGZpcnN0IGl0IGRlbGV0ZXMgcHJvamVjdHMgb24gZGlzayAoaWYgdGhlcmUgYXJlIGFueSB0byBkZWxldGUpCiAgICAgICAgIyBnZXQgbGlzdCBvZiBwcm9qZWN0cyB0byBkZWxldGUgZnJvbSBkaXNrIGJlZm9yZSBzcGF3biBpbiBpbml0Q29udGFpbmVyCiAgICAgICAgZGVsZXRlZF9wcm9qZWN0cyA9IHNlbGYuZ2V0X3N0YXRlX2ZpZWxkKCdkZWxldGVkX3Byb2plY3RzJykKICAgICAgICBpZiBkZWxldGVkX3Byb2plY3RzOgogICAgICAgICAgICBkZWxldGVfY21kID0gZiJybSAtcmYgeycgJy5qb2luKFtqb2luKG1vdW50X3BhdGgsIHNlbGYudXJsX3RvX2RpcihkKSkgZm9yIGQgaW4gZGVsZXRlZF9wcm9qZWN0c10pfSIKICAgICAgICAgICAgc2VsZi5sb2cuaW5mbyhmIkZvbGxvd2luZyBwcm9qZWN0cyB3aWxsIGJlIGRlbGV0ZWQgZm9yIHVzZXIgKHtzZWxmLnVzZXIubmFtZX0pOiB7ZGVsZXRlZF9wcm9qZWN0c30iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbGV0ZV9jbWQgPSAiIgogICAgICAgICMgdGhlbiBjb3BpZXMgaW1hZ2UncyBob21lIGRpciAocmVwbyBjb250ZW50IGFmdGVyIHIyZCBwcm9jZXNzKQogICAgICAgICMgaW50byBwcm9qZWN0J3MgZGlyIG9uIGRpc2sgKGlmIHByb2plY3RfcGF0aCBkb2VzbnQgZXhpc3RzIG9uIHBlcnNpc3RlbnQgZGlzaykKICAgICAgICBwcm9qZWN0X2RpciA9IHNlbGYudXJsX3RvX2RpcihzZWxmLnJlcG9fdXJsKQogICAgICAgIHByb2plY3RfcGF0aCA9IGpvaW4obW91bnRfcGF0aCwgcHJvamVjdF9kaXIpCiAgICAgICAgY29weV9jbWQgPSBmImlmIFsgLWQge3Byb2plY3RfcGF0aH0gXTsgIiBcCiAgICAgICAgICAgICAgICAgICBmInRoZW4gZWNobyAnZGlyZWN0b3J5IHtwcm9qZWN0X3BhdGh9IGV4aXN0cyc7ICIgXAogICAgICAgICAgICAgICAgICAgZiJlbGlmIFsgLUwge3Byb2plY3RfcGF0aH0gXTsgIiBcCiAgICAgICAgICAgICAgICAgICBmInRoZW4gZWNobyAne3Byb2plY3RfcGF0aH0gaXMgYSBzeW1saW5rJzsgIiBcCiAgICAgICAgICAgICAgICAgICBmImVsc2UgbWtkaXIge3Byb2plY3RfcGF0aH0gJiYgY3AgLWEgfi8uIHtwcm9qZWN0X3BhdGh9OyBmaSIKICAgICAgICBpbml0X2NvbnRhaW5lcl9jbWRzID0gW2RlbGV0ZV9jbWQsIGNvcHlfY21kXSBpZiBkZWxldGVfY21kIGVsc2UgW2NvcHlfY21kXQogICAgICAgIGNvbW1hbmQgPSBbIi9iaW4vc2giLCAiLWMiLCAiICYmICIuam9pbihpbml0X2NvbnRhaW5lcl9jbWRzKV0KICAgICAgICBzZWxmLmxvZy5kZWJ1ZyhmIkZvbGxvd2luZyBjb21tYW5kIHdpbGwgYmUgZXhlY3V0ZWQgZm9yIHVzZXIgKHtzZWxmLnVzZXIubmFtZX0pOiB7Y29tbWFuZH0iKQogICAgICAgIHByb2plY3RzX3ZvbHVtZV9tb3VudCA9IHsnbmFtZSc6IHNlbGYudm9sdW1lc1swXVsnbmFtZSddLCAnbW91bnRQYXRoJzogbW91bnRfcGF0aH0KICAgICAgICAjIE5PVEU6IGlmIGJpbmRlciAic3RhcnQiIGNvbmZpZyBpcyBkZWZpbmVkCiAgICAgICAgIyAgKGh0dHBzOi8vbXliaW5kZXIucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2NvbmZpZ19maWxlcy5odG1sI3N0YXJ0LXJ1bi1jb2RlLWJlZm9yZS10aGUtdXNlci1zZXNzaW9ucy1zdGFydHMpCiAgICAgICAgIyAgYW5kIGlmIHN0YXJ0IGNvbW1hbmQgY2hhbmdlcyB0aGUgY29udGVudCwKICAgICAgICAjICBpbml0Y29udGFpbmVyIG1pc3NlcyB0aGF0IGNoYW5nZS4KICAgICAgICAjICBiZWNhdXNlIHN0YXJ0IGNvbW1hbmQgaXMgcnVuIGFzIGFuIEVOVFJZUE9JTlQgYW5kIGluaXRjb250YWluZXIncyBjb21tYW5kIG92ZXJ3cml0ZXMgaXQKICAgICAgICAjICBCdXQgc3RhcnQgY29tbWFuZCB3aWxsIGJlIGV4ZWN1dGVkIGluIG5vdGVib29rIGNvbnRhaW5lciAoYmVjYXVzZSB3ZSBkb250IGRlZmluZSBhIGN1c3RvbSBjb21tYW5kIGZvciBpdCksCiAgICAgICAgIyAgc28gY2hhbmdlIHdpbGwgdGFrZSBwbGFjZSB0aGVyZSwgYW5kIG9uIHVzZXIncyBzaWRlLCB0aGVyZSBpcyBubyBwcm9ibGVtCiAgICAgICAgc2VsZi5pbml0X2NvbnRhaW5lcnMuYXBwZW5kKHsKICAgICAgICAgICAgIm5hbWUiOiAicHJvamVjdC1tYW5hZ2VyIiwKICAgICAgICAgICAgImltYWdlIjogc2VsZi5pbWFnZSwKICAgICAgICAgICAgImNvbW1hbmQiOiBjb21tYW5kLAogICAgICAgICAgICAjIHZvbHVtZXMgaXMgYWxyZWFkeSBkZWZpbmVkIGZvciBub3RlYm9vayBjb250YWluZXIgKHNlbGYudm9sdW1lcykKICAgICAgICAgICAgInZvbHVtZV9tb3VudHMiOiBbcHJvamVjdHNfdm9sdW1lX21vdW50XSwKICAgICAgICB9KQoKICAgICAgICAjIG5vdGVib29rIGNvbnRhaW5lciAodXNlciBzZXJ2ZXIpCiAgICAgICAgIyBtb3VudCBhbGwgcHJvamVjdHMgKGNvbXBsZXRlIHVzZXIgZGlzaykgdG8gL3Byb2plY3RzCiAgICAgICAgIyBmaXJzdCByZW1vdmUgZXhpc3Rpbmcgdm9sdW1lIG1vdW50cyB0byAvcHJvamVjdHMsIHRoaXMgbW91bnQgcGF0aCBzaG91bGQgYmUgdW5pcXVlLAogICAgICAgICMgbm9ybWFsbHkgd2Ugc2hvdWxkbid0IG5lZWQgdGhpcywgYnV0IHNvbWV0aW1lcyB0aGVyZSBpcyBkdXBsaWNhdGlvbiB3aGVuIHRoZXJlIGlzIGEgc3Bhd24gZXJyb3IKICAgICAgICAjIGZvciBleGFtcGxlIHRpbWVvdXQgZXJyb3IgZHVlIHRvIGxvbmcgZG9ja2VyIHB1bGwgKG9mIGEgbm90ZWJvb2sgc2VydmVyIGltYWdlKQogICAgICAgIGZvciBpLCB2X20gaW4gZW51bWVyYXRlKHNlbGYudm9sdW1lX21vdW50cyk6CiAgICAgICAgICAgIGlmIHZfbVsnbW91bnRQYXRoJ10gPT0gcHJvamVjdHNfdm9sdW1lX21vdW50Wydtb3VudFBhdGgnXToKICAgICAgICAgICAgICAgIGRlbCBzZWxmLnZvbHVtZV9tb3VudHNbaV0KCiAgICAgICAgIyBvbmx5IG1vdW50IC9wcm9qZWN0cyBpbiB0aGUgdXNlciBzZXJ2ZXIgaWYgbW91bnRpbmcgYWxsIHByb2plY3RzIGlzIGVuYWJsZWQKICAgICAgICBpZiB6MmpoLmdldF9jb25maWcoJ2N1c3RvbS5tb3VudF9hbGxfcHJvamVjdHMnKToKICAgICAgICAgICAgc2VsZi52b2x1bWVfbW91bnRzLmFwcGVuZChwcm9qZWN0c192b2x1bWVfbW91bnQpCgogICAgICAgICMgbW91bnRQYXRoIGlzIC9ob21lL2pvdnlhbiwgdGhpcyBpcyBzZXQgaW4gejJqaCBoZWxtIGNoYXJ0IHZhbHVlcy55YW1sCiAgICAgICAgIyBtb3VudF9wYXRoID0gIn4vIgogICAgICAgICMgbW91bnRfcGF0aCA9ICIkKEhPTUUpIgogICAgICAgICMgc2VsZi52b2x1bWVfbW91bnRzWzBdWydtb3VudFBhdGgnXSA9IG1vdW50X3BhdGgKICAgICAgICAjIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL3N0b3JhZ2Uvdm9sdW1lcy8jdXNpbmctc3VicGF0aAogICAgICAgICMgbW91bnQgb25seSBwcm9qZWN0X3BhdGggdG8gaG9tZQogICAgICAgIHNlbGYudm9sdW1lX21vdW50c1swXVsnc3ViUGF0aCddID0gcHJvamVjdF9kaXIKCiAgICAgICAgc2VsZi5yZXNldF9kZWxldGVkX3Byb2plY3RzID0gVHJ1ZQogICAgICAgIHJldHVybiBzdXBlcigpLnN0YXJ0KCkKCiAgICBkZWYgZ2V0X3N0YXRlX2ZpZWxkKHNlbGYsIGZpZWxkX25hbWUpOgogICAgICAgICIiIlJldHVybnMganVzdCBjdXJyZW50IHZhbHVlIG9mIGEgZmllbGQgaW4gc3RhdGUsIGRvZXNuJ3QgdXBkYXRlIGFueXRoaW5nIGluIHNwYXduZXIncyBzdGF0ZS4iIiIKICAgICAgICBzZWxmLnVwZGF0ZV9wcm9qZWN0cyA9IEZhbHNlCiAgICAgICAgcmVzZXRfZGVsZXRlZF9wcm9qZWN0cyA9IGdldGF0dHIoc2VsZiwgJ3Jlc2V0X2RlbGV0ZWRfcHJvamVjdHMnLCBGYWxzZSkKICAgICAgICBzZWxmLnJlc2V0X2RlbGV0ZWRfcHJvamVjdHMgPSBGYWxzZQogICAgICAgIHN0YXRlID0gc2VsZi5nZXRfc3RhdGUoKQogICAgICAgIHNlbGYudXBkYXRlX3Byb2plY3RzID0gVHJ1ZQogICAgICAgIHNlbGYucmVzZXRfZGVsZXRlZF9wcm9qZWN0cyA9IHJlc2V0X2RlbGV0ZWRfcHJvamVjdHMKICAgICAgICByZXR1cm4gc3RhdGVbZmllbGRfbmFtZV0KCiAgICBkZWYgZ2V0X3N0YXRlKHNlbGYpOgogICAgICAgICIiIlVwZGF0ZXMgc3RhdGVbInByb2plY3RzIl0gaW4gYHNwYXduZXJzYCB0YWJsZSBhbmQgcmV0dXJucyB0aGUgdXBkYXRlZCBzdGF0ZSB2YWx1ZS4KCiAgICAgICAgV2UgdXNlIHRoaXMgbWV0aG9kIHRvIHVwZGF0ZSBwcm9qZWN0cywgYmVjYXVzZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgYm90aCBpbgogICAgICAgIHN0YXJ0IGFuZCBzdG9wIG9mIHRoZSBzZXJ2ZXIgKHNlZSBqdXB5dGVyaHViLlVzZXIncyBgc3RhcnRgIGFuZCBgc3RvcGAgbWV0aG9kcyksCiAgICAgICAgZGIuY29tbWl0IGlzIGNhbGxlZCBhZnRlciB0aGVzZSBtZXRob2RzLgogICAgICAgICIiIgogICAgICAgIF9zdGF0ZSA9IHNlbGYub3JtX3NwYXduZXIuc3RhdGUKICAgICAgICBpZiBfc3RhdGU6CiAgICAgICAgICAgICMgdXNlciBhbHJlYWR5IGxhdW5jaGVkIGEgcHJvamVjdCAoc3RhcnRlZCBpdHMgc2VydmVyKSwgc3Bhd25lciBoYXMgYSBzdGF0ZQogICAgICAgICAgICBwcm9qZWN0cyA9IF9zdGF0ZS5nZXQoJ3Byb2plY3RzJywgW10pCiAgICAgICAgICAgIF9wcm9qZWN0cyA9IFtdCiAgICAgICAgICAgIGZvciBwcm9qZWN0IGluIHByb2plY3RzOgogICAgICAgICAgICAgICAgIyB0byBiZSBiYWNrd2FyZHMgY29tcGF0aWJsZSBmb3IgdmVyc2lvbiA8PSAwLjIuMC1uMTUzCiAgICAgICAgICAgICAgICAjIGNvbnZlcnQgbGlzdCwgd2hpY2ggY29udGFpbnMgcHJvamVjdCBkYXRhLCB0byBkaWN0CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHByb2plY3QsIGxpc3QpOgogICAgICAgICAgICAgICAgICAgIF9wcm9qZWN0cy5hcHBlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAicmVwb191cmwiOiBwcm9qZWN0WzBdLAogICAgICAgICAgICAgICAgICAgICAgICAiaW1hZ2UiOiBwcm9qZWN0WzFdLAogICAgICAgICAgICAgICAgICAgICAgICAicmVmIjogcHJvamVjdFsyXSwKICAgICAgICAgICAgICAgICAgICAgICAgImRpc3BsYXlfbmFtZSI6IHByb2plY3RbM10sCiAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VzZWQiOiBwcm9qZWN0WzRdLAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIF9wcm9qZWN0cy5hcHBlbmQocHJvamVjdCkKICAgICAgICAgICAgcHJvamVjdHMgPSBfcHJvamVjdHMKICAgICAgICAgICAgZGVsZXRlZF9wcm9qZWN0cyA9IF9zdGF0ZS5nZXQoJ2RlbGV0ZWRfcHJvamVjdHMnLCBbXSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIGlmIHVzZXIgbmV2ZXIgbGF1bmNoZWQgcHJvamVjdCAoc3RhdGUgaXMgZW1wdHkpLCB1c2UgZGVmYXVsdF9wcm9qZWN0CiAgICAgICAgICAgIHByb2plY3RzID0gW3NlbGYuZGVmYXVsdF9wcm9qZWN0XQogICAgICAgICAgICBkZWxldGVkX3Byb2plY3RzID0gW10KICAgICAgICAgICAgc2VsZi5sb2cuaW5mbyhmIlVzZXIgKHtzZWxmLnVzZXIubmFtZX0pIGhhc24ndCBsYXVuY2hlZCBhIHByb2plY3QgeWV0LiIpCiAgICAgICAgc3RhdGUgPSBzdXBlcigpLmdldF9zdGF0ZSgpCiAgICAgICAgcHJvamVjdHMgPSBbCiAgICAgICAgICAgIHsqKnByb2plY3QsICoqc2VsZi51cmxfdG9fcHJvdmlkZXJfYXJncyhwcm9qZWN0WyJyZXBvX3VybCJdKX0KICAgICAgICAgICAgZm9yIHByb2plY3QgaW4gcHJvamVjdHMKICAgICAgICBdCiAgICAgICAgc3RhdGVbJ3Byb2plY3RzJ10gPSBwcm9qZWN0cwogICAgICAgIHN0YXRlWydkZWxldGVkX3Byb2plY3RzJ10gPSBkZWxldGVkX3Byb2plY3RzCgogICAgICAgIGlmIGdldGF0dHIoc2VsZiwgJ3VwZGF0ZV9wcm9qZWN0cycsIFRydWUpIGlzIFRydWUgYW5kIFwKICAgICAgICAgICBoYXNhdHRyKHNlbGYsICdyZXBvX3VybCcpIGFuZCBoYXNhdHRyKHNlbGYsICdpbWFnZScpIGFuZCBoYXNhdHRyKHNlbGYsICdyZWYnKToKICAgICAgICAgICAgIyBwcm9qZWN0IGlzIHN0YXJ0ZWQgb3IgYWxyZWFkeSBydW5uaW5nIG9yIGlzIHN0b3BwZWQsCiAgICAgICAgICAgICMgc28gbW92ZSBwcm9qZWN0IHRvIHRoZSBlbmQgYW5kIHVwZGF0ZSB0aGUgImxhc3QgdXNlZCIgdGltZQogICAgICAgICAgICBuZXdfcHJvamVjdHMgPSBbXQogICAgICAgICAgICBmb3IgcHJvamVjdCBpbiBwcm9qZWN0czoKICAgICAgICAgICAgICAgIGlmIHByb2plY3RbInJlcG9fdXJsIl0gIT0gc2VsZi5yZXBvX3VybDoKICAgICAgICAgICAgICAgICAgICBuZXdfcHJvamVjdHMuYXBwZW5kKHByb2plY3QpCiAgICAgICAgICAgIGZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCiAgICAgICAgICAgIG5ld19wcm9qZWN0cy5hcHBlbmQoewogICAgICAgICAgICAgICAgInJlcG9fdXJsIjogc2VsZi5yZXBvX3VybCwKICAgICAgICAgICAgICAgICJpbWFnZSI6IHNlbGYuaW1hZ2UsCiAgICAgICAgICAgICAgICAicmVmIjogc2VsZi5yZWYsCiAgICAgICAgICAgICAgICAiZGlzcGxheV9uYW1lIjogc2VsZi51cmxfdG9fZGlzcGxheV9uYW1lKHNlbGYucmVwb191cmwpLAogICAgICAgICAgICAgICAgImxhc3RfdXNlZCI6IGRhdGV0aW1lLnV0Y25vdygpLmlzb2Zvcm1hdCgpICsgJ1onLAogICAgICAgICAgICAgICAgKipzZWxmLnVybF90b19wcm92aWRlcl9hcmdzKHNlbGYucmVwb191cmwpLAogICAgICAgICAgICB9KQogICAgICAgICAgICBzdGF0ZVsncHJvamVjdHMnXSA9IG5ld19wcm9qZWN0cwogICAgICAgICAgICBzZWxmLmxvZy5pbmZvKGYiVXNlciAoe3NlbGYudXNlci5uYW1lfSkgaGFzIGp1c3QgdXNlZCB0aGUgcHJvamVjdCB7c2VsZi5yZXBvX3VybH0uIikKCiAgICAgICAgaWYgZ2V0YXR0cihzZWxmLCAncmVzZXRfZGVsZXRlZF9wcm9qZWN0cycsIEZhbHNlKSBpcyBUcnVlOgogICAgICAgICAgICBzdGF0ZVsnZGVsZXRlZF9wcm9qZWN0cyddID0gW10KCiAgICAgICAgcmV0dXJuIHN0YXRlCgogICAgZGVmIGdldF9lbnYoc2VsZik6CiAgICAgICAgZW52ID0gc3VwZXIoKS5nZXRfZW52KCkKICAgICAgICBpZiAncmVwb191cmwnIGluIHNlbGYudXNlcl9vcHRpb25zOgogICAgICAgICAgICBlbnZbJ0JJTkRFUl9SRVBPX1VSTCddID0gc2VsZi51c2VyX29wdGlvbnNbJ3JlcG9fdXJsJ10KICAgICAgICBmb3Iga2V5IGluICgKICAgICAgICAgICAgICAgICdiaW5kZXJfcmVmX3VybCcsCiAgICAgICAgICAgICAgICAnYmluZGVyX2xhdW5jaF9ob3N0JywKICAgICAgICAgICAgICAgICdiaW5kZXJfcGVyc2lzdGVudF9yZXF1ZXN0JywKICAgICAgICAgICAgICAgICdiaW5kZXJfcmVxdWVzdCcpOgogICAgICAgICAgICBpZiBrZXkgaW4gc2VsZi51c2VyX29wdGlvbnM6CiAgICAgICAgICAgICAgICBlbnZba2V5LnVwcGVyKCldID0gc2VsZi51c2VyX29wdGlvbnNba2V5XQogICAgICAgIHJldHVybiBlbnYKCgpjbGFzcyBQcm9qZWN0QVBJSGFuZGxlcihBUElIYW5kbGVyKToKICAgICIiIkEgSnVweXRlckh1YiBBUEkgaGFuZGxlciB0byBtYW5hZ2UgdXNlciBwcm9qZWN0cy4iIiIKCiAgICBkZWYgZ2V0X2pzb25fYm9keShzZWxmKToKICAgICAgICBib2R5ID0gc3VwZXIoKS5nZXRfanNvbl9ib2R5KCkKICAgICAgICBpZiBib2R5IGlzIE5vbmU6CiAgICAgICAgICAgIGJvZHkgPSB7fQogICAgICAgIHJldHVybiBib2R5CgogICAgQGFkbWluX29ubHkKICAgIGFzeW5jIGRlZiBnZXQoc2VsZiwgdXNlcl9uYW1lKToKICAgICAgICAiIiJUYWtlcyBhIHVzZXIgbmFtZSBhbmQgcmV0dXJucyBwcm9qZWN0cyBvZiB0aGF0IHVzZXIuIiIiCiAgICAgICAgIyBnZXQgdXNlcidzIHByb2plY3RzCiAgICAgICAgdXNlciA9IHNlbGYuZmluZF91c2VyKHVzZXJfbmFtZSkKICAgICAgICBpZiBub3QgdXNlcjoKICAgICAgICAgICAgcmFpc2Ugd2ViLkhUVFBFcnJvcig0MDQpCiAgICAgICAgcHJvamVjdHMgPSB7J3Byb2plY3RzJzogdXNlci5zcGF3bmVyLmdldF9zdGF0ZV9maWVsZCgncHJvamVjdHMnKX0KICAgICAgICBzZWxmLndyaXRlKGpzb24uZHVtcHMocHJvamVjdHMpKQoKICAgIEBhZG1pbl9vcl9zZWxmCiAgICBhc3luYyBkZWYgZGVsZXRlKHNlbGYsIHVzZXJfbmFtZSk6CiAgICAgICAgIiIiRGVsZXRlcyBhIHByb2plY3QgZnJvbSBzdGF0ZVsicHJvamVjdHMiXSBhbmQgYWRkcyBpdCBpbnRvIHN0YXRlWyJkZWxldGVkX3Byb2plY3RzIl0KICAgICAgICBpbiBgc3Bhd25lcnNgIHRhYmxlIGluIGRhdGFiYXNlLiBJdCBkb2Vzbid0IGRlbGV0ZSBwcm9qZWN0IGZpbGVzIG9uIGRpc2sgKHVzZXIgc3RvcmFnZSksCiAgICAgICAgdGhpcyBpcyBkb25lIGJ5IGBJbml0Q29udGFpbmVyYCBkdXJpbmcgbGF1bmNoIG9mIGEgcHJvamVjdCBuZXh0IHRpbWUuCiAgICAgICAgSWYgdXNlciBoYXMgYSBydW5uaW5nIHNlcnZlciwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG1lc3NhZ2UgdG8gdXNlciBhbmQgZG9lc24ndCBkbyBhbnkgY2hhbmdlLgogICAgICAgICIiIgogICAgICAgICMgZGVsZXRlIGEgcHJvamVjdCBvZiB1c2VyCiAgICAgICAgdXNlciA9IHNlbGYuZmluZF91c2VyKHVzZXJfbmFtZSkKICAgICAgICByZXNwb25zZSA9IHt9CiAgICAgICAgaWYgdXNlci5zcGF3bmVyLmFjdGl2ZToKICAgICAgICAgICAgcmVzcG9uc2VbImVycm9yIl0gPSAiUHJvamVjdCBkZWxldGlvbiBpcyBub3QgYWxsb3dlZCB3aGlsZSB0aGUgdXNlciBzZXJ2ZXIgaXMgYWN0aXZlLiIKICAgICAgICBlbHNlOgogICAgICAgICAgICBib2R5ID0gc2VsZi5nZXRfanNvbl9ib2R5KCkKICAgICAgICAgICAgaWYgInJlcG9fdXJsIiBpbiBib2R5IGFuZCAibmFtZSIgaW4gYm9keSBhbmQgImlkIiBpbiBib2R5OgogICAgICAgICAgICAgICAgcmVwb191cmwgPSBib2R5WyJyZXBvX3VybCJdCiAgICAgICAgICAgICAgICBwcm9qZWN0cyA9IHVzZXIuc3Bhd25lci5nZXRfc3RhdGVfZmllbGQoJ3Byb2plY3RzJykKICAgICAgICAgICAgICAgIG5ld19wcm9qZWN0cyA9IFtdCiAgICAgICAgICAgICAgICBkZWxldGVkX3Byb2plY3RzID0gdXNlci5zcGF3bmVyLmdldF9zdGF0ZV9maWVsZCgnZGVsZXRlZF9wcm9qZWN0cycpCiAgICAgICAgICAgICAgICBmb3VuZCA9IEZhbHNlCiAgICAgICAgICAgICAgICBmb3IgcHJvamVjdCBpbiBwcm9qZWN0czoKICAgICAgICAgICAgICAgICAgICBpZiByZXBvX3VybCAhPSBwcm9qZWN0WyJyZXBvX3VybCJdOgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfcHJvamVjdHMuYXBwZW5kKHByb2plY3QpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlcG9fdXJsIG5vdCBpbiBkZWxldGVkX3Byb2plY3RzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZF9wcm9qZWN0cy5hcHBlbmQocmVwb191cmwpCiAgICAgICAgICAgICAgICBpZiBmb3VuZCBpcyBUcnVlOgogICAgICAgICAgICAgICAgICAgICMgTk9URTogdGhpcyB3YXkgd2UgZW5zdXJlIHRoYXQgdGhpcyBKU09ORGljdCBmaWVsZCAoc3RhdGUpIGlzIHVwZGF0ZWQgd2l0aCBkYi5jb21taXQoKQogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdXNlci5zcGF3bmVyLmdldF9zdGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgc3RhdGVbInByb2plY3RzIl0gPSBuZXdfcHJvamVjdHMKICAgICAgICAgICAgICAgICAgICBzdGF0ZVsiZGVsZXRlZF9wcm9qZWN0cyJdID0gZGVsZXRlZF9wcm9qZWN0cwogICAgICAgICAgICAgICAgICAgIHVzZXIuc3Bhd25lci5vcm1fc3Bhd25lci5zdGF0ZSA9IHN0YXRlCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5jb21taXQoKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlByb2plY3Qge2JvZHlbJ25hbWUnXX0gaXMgZGVsZXRlZC4iCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2cuaW5mbyhmInt1c2VyLm5hbWV9OiB7bWVzc2FnZX0iKQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlWyJzdWNjZXNzIl0gPSBtZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VbImlkIl0gPSBib2R5WyJpZCJdCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlByb2plY3Qge2JvZHlbJ25hbWUnXX0gKHtib2R5WydyZXBvX3VybCddfSkgZG9lc24ndCBleGlzdC4iCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2cuaW5mbyhmInt1c2VyLm5hbWV9OiB7bWVzc2FnZX0iKQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlWyJlcnJvciJdID0gbWVzc2FnZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmVzcG9uc2VbImVycm9yIl0gPSAiQmFkIHJlcXVlc3QuIgogICAgICAgIHNlbGYud3JpdGUoanNvbi5kdW1wcyhyZXNwb25zZSkpCg==
        persistent_bhub_css:
          mountPath: /usr/local/share/jupyterhub/static/persistent_bhub/persistent_bhub.css
          binaryData: Lyogc3R5bGVzIGZvciBob21lLmh0bWwgKi8KI21haW4tY29udGFpbmVyIHsKCS8qb3ZlcmZsb3c6IGhpZGRlbjsqLwoJYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKCXBhZGRpbmctbGVmdDogMzJweDsKCXBhZGRpbmctcmlnaHQ6IDMycHg7Cn0KCiNoZWFkZXIgewoJbWFyZ2luLWxlZnQ6IDMlOwoJbWFyZ2luLWJvdHRvbTogMzJweDsKCW1hcmdpbi10b3A6IDMycHg7Cgl3aWR0aDogOTQlOwoJYm9yZGVyLWJvdHRvbTogMDsKCXBhZGRpbmctdG9wOiAxMnB4OwoJcGFkZGluZy1ib3R0b206IDI0cHg7Cn0KI2hlYWRlciA+IGgzIHsKICAgIC8qZm9udC1zaXplOiA0MnB4OyovCiAgICAvKmxpbmUtaGVpZ2h0OiAxLjM7Ki8KICAgIGRpc3BsYXk6IG5vbmU7Cn0KI2V4cGxhbmF0aW9uIHsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICBsaW5lLWhlaWdodDogMS40OwoJY29sb3I6IHJnYig0MCwgNDAsIDQwKTsKCWZvbnQtc2l6ZTogMS44ZW07Cn0KCiNidWlsZC1mb3JtIHsKCW1hcmdpbi1ib3R0b206IDA7Cn0KLmJ1aWxkLWZvcm0gewoJcGFkZGluZzogNXB4IDE4cHggMjBweCAxOHB4ICFpbXBvcnRhbnQ7Cn0KI2J1aWxkLWZvcm0gLmNhcmV0IHsKICAgIGJvcmRlci10b3AtY29sb3I6IGJsYWNrOwp9CiNidWlsZC1mb3JtIC5kcm9wZG93bi1tZW51IHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7Cn0KI2J1aWxkLWZvcm0gLmRyb3Bkb3duLW1lbnU+bGk+YSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREREREOwogICAgY29sb3I6IHJnYig1MCw1MCw1MCk7CiAgICBmb250LXdlaWdodDogbm9ybWFsOwp9CiNidWlsZC1mb3JtIC5kcm9wZG93bi1tZW51PmxpPmE6aG92ZXJ7CiAgICBjb2xvcjogcmdiKDUwLDUwLDUwKTsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7Cn0KCi5idWlsZC1wcm9qZWN0LWNvbnRhaW5lciB7CgliYWNrZ3JvdW5kOiByZ2IoMjM1LCAyMzYsIDIzNyk7CgltYXJnaW46IDBweDsKfQoKLyogcHJvamVjdHMgdGFibGUgICovCnRkLnByb2plY3RzLWRpc3BsYXktbmFtZSB7CiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlIWltcG9ydGFudDsKICAgIC8qIHRydW5jYXRlIGxvbmcgcmVwbyBkaXNwbGF5IG5hbWVzICovCiAgICBtYXgtd2lkdGg6IDUwY2g7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7Cn0KLnByb2plY3QtdGV4dCB7CglwYWRkaW5nLXRvcDogMzBweDsKCXBhZGRpbmctYm90dG9tOiAzMHB4OwoJbWFyZ2luOiAtMzBweCAtMzJweCAxNXB4IC0zMnB4OwogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KLnByb2plY3QtdGV4dCA+IGRpdj4gaW1nIHsKCW1heC13aWR0aDogODAlOwp9CiN5b3VyLXByb2plY3RzIHsKYm9yZGVyOiAxcHggc29saWQgI2NjYzsKYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwwLDAsLjA3NSk7CmJvcmRlci1yYWRpdXM6IDRweDsKfQovKiN5b3VyLXByb2plY3RzID4gdGhlYWQgeyovCi8qISoJYmFja2dyb3VuZC1jb2xvcjogI0RERERERDsgKiEqLwovKn0qLwojeW91ci1wcm9qZWN0cyA+IHRib2R5ID4gdHIgewoJYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsKCWJvcmRlcjogMXB4IHNvbGlkICNjY2M7Cn0KLnByb2plY3RzLWNvbnRhaW5lciB7CglwYWRkaW5nLWxlZnQ6IDE4cHg7CglwYWRkaW5nLXJpZ2h0OjE4cHg7CgltYXJnaW4tbGVmdDogLTMzcHg7CgltYXJnaW4tcmlnaHQ6IC0zM3B4Owp9CmRpdi5uby1wcm9qZWN0cyB7CgltYXJnaW4tYm90dG9tOiAxNXB4Owp9Ci5wcm9qZWN0LWxhdW5jaCB7CiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOwp9Ci5kZWxldGUtcHJvamVjdC1sYWJlbCB7CiAgICBmb250LXdlaWdodDogbm9ybWFsOwp9CgoudXJsLCAuYmFkZ2VzIHsKCWRpc3BsYXk6IG5vbmU7Cn0KCmRpdiNsb2ctY29udGFpbmVyIHsKICAgIHdpZHRoOiAxMDAlOwogICAgbWFyZ2luOiAwIDAgMzBweCAwOwp9CgojaG93LWl0LXdvcmtzIHsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICBsaW5lLWhlaWdodDogMS40Owp9CgojaG93LWl0LXdvcmtzID4gZGl2LnJvdyB7CiAgICBtYXJnaW46IDE2cHg7Cn0KCi8qYmluZGVyIGZvcm0qLwovKiNtYWluID4gZGl2LnJvdyA+IGRpdi5jb2wtbGctMTAgeyovCi8qCSEqYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsqISovCi8qCXBhZGRpbmctbGVmdDogMzJweDsqLwovKglwYWRkaW5nLXJpZ2h0OiAzMnB4OyovCi8qICAgIG1hcmdpbi1sZWZ0OiAwOyovCi8qICAgIHdpZHRoOiAxMDAlOyovCi8qfSovCi8qYmluZGVyIGZvb3RlciovCg==
        persistent_bhub_js:
          mountPath: /usr/local/share/jupyterhub/static/persistent_bhub/persistent_bhub.js
          binaryData: 
        persistent_bhub_templates_home:
          mountPath: /etc/jupyterhub/templates/home.html
          binaryData: 


      templateVars:
        persistency_explanation:
          name: "Have a Binder-Ready repository? With Persistent BinderHub, turn this repository into a persistent Jupyter environment, allowing you to continue your analysis from anywhere at any time."
      #shutdownOnLogout: true
      #authenticatePrometheus: false
      redirectToServer: false
      services:
        binder:
          oauth_no_confirm: true
          oauth_client_id: "binder-oauth-client-test"
      config:
        JupyterHub:
          authenticator_class: dummy
      extraConfig:
        20-template-variables:  |
          import random

          c.JupyterHub.template_vars.update({
              "binder_base_url": "/services/binder/",
              "static_binder": "/services/binder/static/",
              "static_version": hex(random.getrandbits(128))[2:],
          })
        10-project-api: |
          from persistent_bhub_config import ProjectAPIHandler

          c.JupyterHub.extra_handlers = [(r'/api/projects/([^/]+)', ProjectAPIHandler)]
          # restart_policy is already set 'OnFailure' by kubespawner:
          # https://github.com/jupyterhub/kubespawner/blob/8751773916ccc6b84c998f7950dd3e07fea5ae4e/kubespawner/objects.py#L231
          # c.KubeSpawner.extra_pod_config.update({'restart_policy': 'OnFailure'})
        00-binder: |
          import pathlib
          a= pathlib.Path(__file__).parent.resolve()
          print(a)
          p = a.glob('**/*')
          files = [x for x in p if x.is_file()]
          print(files)
          from persistent_bhub_config import PersistentBinderSpawner
          c.JupyterHub.spawner_class = PersistentBinderSpawner

    proxy:
      chp:
        # NOTE: hub and proxy must have 1 pod
        # (https://github.com/jupyterhub/jupyterhub/issues/2841#issuecomment-561848594)
        # replicas: 1
        pdb:
          minAvailable: 0

    singleuser:
      # events_enabled - to get events from kubespawner
      events: true
      # to make notebook servers aware of hub
      cmd: jupyterhub-singleuser
      storage:
        type: dynamic
        capacity: 10Gi
      # this is not used, default_project is used instead
      image:
        name: null
        tag: null

    # https://zero-to-jupyterhub.readthedocs.io/en/latest/administrator/optimization.html#pulling-images-before-users-arrive
    # we dont need this, because default project must be always built at first
    prePuller:
      hook:
        enabled: false
      continuous:
        enabled: false
